name: Installer for macOS (10.7-10.8)
on:
  workflow_dispatch:
    inputs:
      macos_version:
        description: 'Legacy macOS version to download'
        required: true
        type: choice
        options:
          - '10.8 Mountain Lion'
          - '10.7 Lion'
      macos_output:
        description: 'Output format (ISO, DMG, or Both)'
        required: true
        type: choice
        options:
          - 'Both DMG and ISO'
          - 'DMG only'
          - 'ISO only'
        default: 'Both DMG and ISO'

jobs:
  download:
    runs-on: macos-13
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set version details
        id: version-details
        run: |
          case "${{ github.event.inputs.macos_version }}" in
            "10.8 Mountain Lion")
              echo "version=10.8" >> $GITHUB_OUTPUT
              echo "name=Mountain Lion" >> $GITHUB_OUTPUT
              echo "url=https://updates.cdn-apple.com/2021/macos/031-0627-20210614-90D11F33-1A65-42DD-BBEA-E1D9F43A6B3F/InstallMacOSX.dmg" >> $GITHUB_OUTPUT
              echo "tag=10.8-mountain-lion" >> $GITHUB_OUTPUT
              ;;
            "10.7 Lion")
              echo "version=10.7" >> $GITHUB_OUTPUT
              echo "name=Lion" >> $GITHUB_OUTPUT
              echo "url=https://updates.cdn-apple.com/2021/macos/041-7683-20210614-E610947E-C7CE-46EB-8860-D26D71F0D3EA/InstallMacOSX.dmg" >> $GITHUB_OUTPUT
              echo "tag=10.7-lion" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "‚ùå Unknown version: ${{ github.event.inputs.macos_version }}"
              exit 1
              ;;
          esac

      - name: Enhanced Download and Extract InstallESD
        run: |
          echo "üçé Starting Enhanced Legacy macOS Bootable ISO creation for ${{ steps.version-details.outputs.name }} (${{ steps.version-details.outputs.version }})"
          echo "üîó Download URL: ${{ steps.version-details.outputs.url }}"
          
          # Step 1: Download legacy installer
          echo "üîΩ Downloading macOS ${{ steps.version-details.outputs.name }} (${{ steps.version-details.outputs.version }})"
          
          # Set expected checksums for 10.7 and 10.8
          case "${{ steps.version-details.outputs.version }}" in
            "10.8")
              EXPECTED_CHECKSUM="b006a6d63f20d0b369493469699d42d5cbca91c295b40b273f6fe9eeca3484ce" # Replace with actual Mountain Lion checksum
              ;;
            "10.7")
              EXPECTED_CHECKSUM="db0b2300de719fa3e4ee132b55afd4e689211ad5332760fe5fe7a30351c9e75c" # Replace with actual Lion checksum
              ;;
            *)
              EXPECTED_CHECKSUM=""
              ;;
          esac
          
          if curl -L -o /tmp/legacy-installer.dmg "${{ steps.version-details.outputs.url }}"; then
            echo "‚úÖ Download completed"
            echo "üìä File size: $(ls -lh /tmp/legacy-installer.dmg | awk '{print $5}')"
            # Verify checksum if set
            if [ -n "$EXPECTED_CHECKSUM" ]; then
              echo "üîç Verifying file integrity..."
              ACTUAL_CHECKSUM=$(openssl dgst -sha256 /tmp/legacy-installer.dmg | cut -d' ' -f2)
              if [ "$ACTUAL_CHECKSUM" != "$EXPECTED_CHECKSUM" ]; then
                echo "‚ùå Checksum verification failed!"
                echo "Expected: $EXPECTED_CHECKSUM"
                echo "Actual:   $ACTUAL_CHECKSUM"
                exit 1
              fi
              echo "‚úÖ Checksum verified: $ACTUAL_CHECKSUM"
            fi
          else
            echo "‚ùå Failed to download installer"
            exit 1
          fi
          
          # Step 2: Extract InstallESD.dmg from the legacy installer
          echo "üì¶ Extracting InstallESD.dmg from legacy installer..."
          
          # Mount the downloaded DMG
          if hdiutil attach /tmp/legacy-installer.dmg -noverify -nobrowse -mountpoint /Volumes/LegacyInstaller; then
            echo "‚úÖ DMG mounted successfully"
          else
            echo "‚ùå Failed to mount DMG"
            exit 1
          fi
          
          # Find the installer package
          INSTALLER_PKG=$(find /Volumes/LegacyInstaller -name "*.pkg" -type f | head -n 1)
          
          if [ -z "$INSTALLER_PKG" ]; then
            echo "‚ùå No installer package found in DMG"
            echo "Contents of mounted DMG:"
            ls -la /Volumes/LegacyInstaller/
            exit 1
          fi
          
          echo "‚úÖ Found installer package: $INSTALLER_PKG"
          
          # Copy the package to a temporary location
          cp "$INSTALLER_PKG" /tmp/installer.pkg
          echo "üìä Package size: $(ls -lh /tmp/installer.pkg | awk '{print $5}')"
          
          # Detach the DMG
          hdiutil detach /Volumes/LegacyInstaller
          echo "‚úÖ Package extracted successfully"
          
          # Step 3: Extract InstallESD.dmg from the package
          echo "üì¶ Extracting InstallESD.dmg from package..."
          
          # Use a unique directory name to avoid conflicts
          EXTRACT_DIR="/tmp/pkg_extract_$$_$(date +%s)"
          echo "üìÅ Using unique extraction directory: $EXTRACT_DIR"
          
          # Extract the package contents using pkgutil
          if pkgutil --expand /tmp/installer.pkg "$EXTRACT_DIR" 2>/dev/null; then
            echo "‚úÖ Package expanded successfully with pkgutil"
          else
            echo "‚ùå Failed to extract package"
            exit 1
          fi
          
          # Step 4: Look for InstallESD.dmg in the package structure
          echo "üîç Looking for InstallESD.dmg in extracted package structure..."
          
          INSTALL_ESD=""
          
          # Check common locations for InstallESD.dmg
          if [ -f "$EXTRACT_DIR/InstallMacOSX.pkg/InstallESD.dmg" ]; then
            INSTALL_ESD="$EXTRACT_DIR/InstallMacOSX.pkg/InstallESD.dmg"
            echo "‚úÖ Found InstallESD.dmg: $INSTALL_ESD"
          elif [ -f "$EXTRACT_DIR/InstallOS.pkg/InstallESD.dmg" ]; then
            INSTALL_ESD="$EXTRACT_DIR/InstallOS.pkg/InstallESD.dmg"
            echo "‚úÖ Found InstallESD.dmg: $INSTALL_ESD"
          else
            # Search recursively
            INSTALL_ESD=$(find "$EXTRACT_DIR" -name "InstallESD.dmg" -type f | head -n 1)
            if [ -n "$INSTALL_ESD" ]; then
              echo "‚úÖ Found InstallESD.dmg via search: $INSTALL_ESD"
            fi
          fi
          
          if [ -z "$INSTALL_ESD" ]; then
            echo "‚ùå InstallESD.dmg not found in package"
            echo "Package structure:"
            find "$EXTRACT_DIR" -type f | head -20
            exit 1
          fi
          
          # Copy InstallESD.dmg to temp location
          cp "$INSTALL_ESD" /tmp/InstallESD.dmg
          echo "üìä InstallESD.dmg size: $(ls -lh /tmp/InstallESD.dmg | awk '{print $5}')"
          
          # Clean up extraction directory
          rm -rf "$EXTRACT_DIR"
          echo "‚úÖ InstallESD.dmg extracted successfully"

      - name: Create DMG Output (if requested)
        if: ${{ contains(github.event.inputs.macos_output, 'DMG') }}
        run: |
          LEGACY_DMG="/tmp/InstallESD.dmg"
          if [ -f "$LEGACY_DMG" ]; then
            echo "DMG output requested. Copying InstallESD.dmg to workspace as final DMG artifact."
            cp "$LEGACY_DMG" "macOS-${{ steps.version-details.outputs.tag }}.dmg"
            echo "‚úÖ DMG created: macOS-${{ steps.version-details.outputs.tag }}.dmg"
          else
            echo "No InstallESD.dmg found to copy as DMG."
          fi

      - name: Create Enhanced Bootable ISO (if requested)
        if: ${{ contains(github.event.inputs.macos_output, 'ISO') }}
        run: |
          echo "üíø Creating bootable ISO from InstallESD.dmg..."
          
          # Verify InstallESD.dmg exists
          if [ ! -f "/tmp/InstallESD.dmg" ]; then
            echo "‚ùå InstallESD.dmg not found"
            exit 1
          fi
          
          # Mount the InstallESD.dmg to examine its structure
          if hdiutil attach /tmp/InstallESD.dmg -noverify -nobrowse -mountpoint /Volumes/InstallESD; then
            echo "‚úÖ InstallESD.dmg mounted successfully"
            
            echo "üìã InstallESD contents:"
            ls -la /Volumes/InstallESD/
            
            # Check if it has the proper boot files
            if [ -f "/Volumes/InstallESD/System/Library/CoreServices/boot.efi" ]; then
              echo "‚úÖ Found boot.efi - this should be bootable"
            else
              echo "‚ö†Ô∏è boot.efi not found - may not boot properly in VMs"
            fi
            
            # Check for BaseSystem.dmg which is needed for booting
            if [ -f "/Volumes/InstallESD/BaseSystem.dmg" ]; then
              echo "‚úÖ Found BaseSystem.dmg - good for booting"
            else
              echo "‚ö†Ô∏è BaseSystem.dmg not found"
            fi
            
            # Unmount InstallESD
            hdiutil detach /Volumes/InstallESD
            
            # Convert InstallESD.dmg directly to ISO with proper settings for booting
            echo "üîÑ Converting InstallESD.dmg to bootable ISO..."
            
            OUTPUT_ISO="macOS-${{ steps.version-details.outputs.tag }}.iso"
            
            # Use UDTO format with proper settings for VM compatibility
            if hdiutil convert /tmp/InstallESD.dmg -format UDTO -o "/tmp/bootable-legacy"; then
              if [ -f "/tmp/bootable-legacy.cdr" ]; then
                mv "/tmp/bootable-legacy.cdr" "$OUTPUT_ISO"
                echo "‚úÖ Bootable ISO created successfully"
                echo "üìä Final ISO size: $(ls -lh "$OUTPUT_ISO" | awk '{print $5}')"
              else
                echo "‚ùå CDR file not found after conversion"
                exit 1
              fi
            else
              echo "‚ùå Failed to convert InstallESD.dmg to ISO"
              exit 1
            fi
          else
            echo "‚ùå Failed to mount InstallESD.dmg"
            exit 1
          fi

      - name: Verify Enhanced ISO Structure (if requested)
        if: ${{ contains(github.event.inputs.macos_output, 'ISO') }}
        run: |
          OUTPUT_ISO="macOS-${{ steps.version-details.outputs.tag }}.iso"
          
          echo "üîç Verifying enhanced ISO structure..."
          
          # Check ISO format and structure
          echo "üìã ISO format information:"
          hdiutil imageinfo "$OUTPUT_ISO" | grep -E "(Format|Partition|Bootable|Checksum)" || true
          
          # Mount the ISO to verify contents
          echo "üìÅ Mounting ISO to verify contents..."
          if hdiutil attach "$OUTPUT_ISO" -noverify -nobrowse -mountpoint "/Volumes/Legacy Bootable"; then
            echo "‚úÖ ISO mounted successfully for verification"
            
            echo "üìã ISO contents:"
            ls -la "/Volumes/Legacy Bootable/"
            
            # Check for essential boot files
            if [ -f "/Volumes/Legacy Bootable/System/Library/CoreServices/boot.efi" ]; then
              echo "‚úÖ boot.efi found in ISO"
            else
              echo "‚ö†Ô∏è boot.efi not found in ISO"
            fi
            
            if [ -f "/Volumes/Legacy Bootable/BaseSystem.dmg" ]; then
              echo "‚úÖ BaseSystem.dmg found in ISO"
            else
              echo "‚ö†Ô∏è BaseSystem.dmg not found in ISO"
            fi
            
            # Unmount verification
            hdiutil detach "/Volumes/Legacy Bootable"
            echo "‚úÖ ISO verification completed"
          else
            echo "‚ö†Ô∏è Could not mount ISO for verification, but file was created"
          fi
          
          # Show enhanced VM setup instructions
          echo ""
          echo "üñ•Ô∏è Enhanced Virtual Machine Setup Instructions:"
          echo "=============================================="
          echo "‚úÖ Your enhanced bootable ISO is ready! Size: $(ls -lh macOS-${{ steps.version-details.outputs.tag }}.iso | awk '{print $5}')"
          echo ""
          echo "üîß This ISO was created from the original InstallESD.dmg and should be properly bootable."
          echo ""
          echo "üì± For Parallels Desktop (‚úÖ Tested and working):"
          echo "1. Create new VM ‚Üí 'Install Windows or another OS from DVD or image file'"
          echo "2. Select this ISO file: macOS-${{ steps.version-details.outputs.tag }}.iso"
          echo "3. Choose 'macOS' as operating system"
          echo "4. Configure VM with at least 4GB RAM and 64GB disk space"
          echo "5. Boot from the ISO - it should boot directly to the macOS installer"
          echo ""
          echo "üñ•Ô∏è For VMware Fusion:"
          echo "1. Create new VM ‚Üí 'Install from disc or image'"
          echo "2. Select this ISO file: macOS-${{ steps.version-details.outputs.tag }}.iso"
          echo "3. Choose 'Apple Mac OS X' and select the appropriate version"
          echo "4. Boot from the ISO"
          echo ""
          echo "üì¶ For VirtualBox:"
          echo "1. Create new VM ‚Üí Type: Mac OS X, Version: Mac OS X (64-bit)"
          echo "2. Attach the ISO to the virtual optical drive"
          echo "3. Boot from the ISO"
          echo ""
          echo "‚ö†Ô∏è If the ISO still doesn't boot:"
          echo "  ‚Ä¢ Check VM settings - ensure UEFI/EFI boot is enabled"
          echo "  ‚Ä¢ Try different VM software (Parallels often has better Mac support)"
          echo "  ‚Ä¢ The InstallESD.dmg might need additional modifications for VM compatibility"

      - name: Push to GHCR
        run: |
          echo "üöÄ Pushing to GitHub Container Registry..."
          brew install oras || true
          echo "Logging into GHCR..."
          echo "${{ secrets.GITHUB_TOKEN }}" | oras login ghcr.io --username ${{ github.actor }} --password-stdin

          OUTPUT_ISO="macOS-${{ steps.version-details.outputs.tag }}.iso"
          LEGACY_DMG="macOS-${{ steps.version-details.outputs.tag }}.dmg"
          ISO_TAG="${{ steps.version-details.outputs.tag }}-iso"
          DMG_TAG="${{ steps.version-details.outputs.tag }}-dmg"

          # Push DMG if requested and present
          if [[ "${{ github.event.inputs.macos_output }}" == *"DMG"* ]]; then
            if [ -f "$LEGACY_DMG" ]; then
              echo "[DEBUG] Pushing DMG as $DMG_TAG"
              oras push ghcr.io/${{ github.repository }}:$DMG_TAG \
                --disable-path-validation \
                "$LEGACY_DMG:application/x-apple-diskimage"
            else
              echo "[ERROR] DMG requested but $LEGACY_DMG not found!"
            fi
          fi

          # Push ISO if requested and present
          if [[ "${{ github.event.inputs.macos_output }}" == *"ISO"* ]]; then
            if [ -f "$OUTPUT_ISO" ]; then
              echo "[DEBUG] Pushing ISO as $ISO_TAG"
              oras push ghcr.io/${{ github.repository }}:$ISO_TAG \
                --disable-path-validation \
                "$OUTPUT_ISO:application/x-cd-image"
            else
              echo "[ERROR] ISO requested but $OUTPUT_ISO not found!"
            fi
          fi

          # Clean up temporary files
          rm -f /tmp/legacy-installer.dmg
          rm -f /tmp/installer.pkg
          rm -f /tmp/InstallESD.dmg
          rm -f /tmp/bootable-legacy.cdr
          echo "‚úÖ Cleanup completed"

          echo ""
          echo "üì• To download this enhanced bootable ISO and/or DMG later:"
          if [[ "${{ github.event.inputs.macos_output }}" == *"DMG"* ]]; then
            echo "oras pull ghcr.io/${{ github.repository }}:$DMG_TAG # For DMG"
          fi
          if [[ "${{ github.event.inputs.macos_output }}" == *"ISO"* ]]; then
            echo "oras pull ghcr.io/${{ github.repository }}:$ISO_TAG # For ISO"
          fi
          echo ""
          echo "üéâ Enhanced Legacy macOS bootable ISO creation completed successfully!"

      - name: Summary
        run: |
          OUTPUT_ISO="macOS-${{ steps.version-details.outputs.tag }}.iso"
          
          echo ""
          echo "üéâ SUCCESS! Enhanced ${{ steps.version-details.outputs.name }} bootable ISO created successfully!"
          echo ""
          echo "üìÅ Created files:"
          echo "   ‚Ä¢ Bootable ISO: $(ls -lh "$OUTPUT_ISO" | awk '{print $5}')"
          echo ""
          echo "üî¨ This enhanced ISO uses the improved bootable method:"
          echo "   ‚Ä¢ Direct InstallESD.dmg conversion for proper VM boot compatibility"
          echo "   ‚Ä¢ Preserves original Apple boot structure and files"
          echo "   ‚Ä¢ UDTO format optimized for VM platforms"
          echo "   ‚Ä¢ Enhanced verification and error handling"
          echo ""
          echo "üí° Usage recommendations:"
          echo "   ‚Ä¢ Parallels Desktop: Use this bootable ISO (tested ‚úÖ)"
          echo "   ‚Ä¢ VMware Fusion: Use this bootable ISO format"
          echo "   ‚Ä¢ VirtualBox: Use this bootable ISO format"
          echo ""
          echo "‚úÖ Ready for VM deployment with enhanced bootability!"
